name: Automated Release

on:
  push:
    tags:
      - 'v*'

env:
  DB_SERVER: ${{ secrets.DB_SERVER || 'localhost' }}
  DB_NAME_PROD: MODEL_REGISTRY

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      release_id: ${{ steps.create_release.outputs.id }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Model Registry ${{ github.ref_name }}
          draft: false
          prerelease: false
          body: |
            ## Model Registry Release ${{ github.ref_name }}
            
            ### Changes in this release:
            - Automated release from CI/CD pipeline
            - Database schema updates
            - Bug fixes and improvements
            
            ### Installation:
            1. Download the release package
            2. Run the installation scripts
            3. Configure your database connection
            
            ### Documentation:
            See the [User Guide](docs/user_guide.md) for detailed instructions.

  build-package:
    name: Build Release Package
    runs-on: ubuntu-latest
    needs: create-release
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create release package
        run: |
          echo "Creating release package..."
          VERSION=${{ github.ref_name }}
          mkdir -p releases
          zip -r "releases/model-registry-$VERSION.zip" \
            database/ \
            scripts/ \
            docs/ \
            reports/ \
            README.md \
            -x "*.git*" "tests/*" "logs/*" "*.pyc" "__pycache__/*"
          echo "Package created: releases/model-registry-$VERSION.zip"

      - name: Upload release assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./releases/model-registry-${{ github.ref_name }}.zip
          asset_name: model-registry-${{ github.ref_name }}.zip
          asset_content_type: application/zip

  deploy-release:
    name: Deploy Release to Production
    runs-on: ubuntu-latest
    needs: [create-release, build-package]
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SQL Server Tools
        uses: microsoft/sqlserver-actions/setup-sqlcmd@v1

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Deploy to production
        run: |
          echo "Deploying release ${{ github.ref_name }} to production..."
          
          # Backup production database
          echo "Creating backup of production database..."
          BACKUP_FILE="model_registry_backup_$(date +%Y%m%d_%H%M%S).bak"
          sqlcmd -S $DB_SERVER -E -Q "BACKUP DATABASE [$DB_NAME_PROD] TO DISK = N'/var/backups/$BACKUP_FILE'"
          
          # Run deployment with rollback capability
          cd scripts
          sqlcmd -S $DB_SERVER -d $DB_NAME_PROD -E -i deploy_production.sql
          
          # Run post-deployment validation
          python3 ../tests/post_deployment_tests.py --database $DB_NAME_PROD

      - name: Run health checks
        run: |
          echo "Running final health checks..."
          python3 tests/health_check.py --database $DB_NAME_PROD

      - name: Update release notes
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const deploymentStatus = '${{ job.status }}';
            
            let body = `## Model Registry Release ${{ github.ref_name }}
            
            ### Deployment Status: ${deploymentStatus === 'success' ? '‚úÖ Success' : '‚ùå Failed'}
            
            ### Changes in this release:
            - Automated release from CI/CD pipeline
            - Database schema updates
            - Bug fixes and improvements
            
            ### Installation:
            1. Download the release package
            2. Run the installation scripts
            3. Configure your database connection
            
            ### Documentation:
            See the [User Guide](docs/user_guide.md) for detailed instructions.
            
            ### Deployment Details:
            - Deployed at: ${new Date().toISOString()}
            - Commit: ${{ github.sha }}
            - Branch: ${{ github.ref_name }}`;
            
            if (deploymentStatus === 'success') {
              body += `
              
              ### Health Check Results:
              ‚úÖ All health checks passed
              ‚úÖ Database backup completed
              ‚úÖ Post-deployment tests passed`;
            }
            
            github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: ${{ needs.create-release.outputs.release_id }},
              body: body
            });

  notify-release:
    name: Notify Release Deployment
    runs-on: ubuntu-latest
    needs: deploy-release
    if: always()
    steps:
      - name: Send release notification
        run: |
          echo "Sending release notification..."
          if [ -n "${{ secrets.SLACK_WEBHOOK_URL }}" ]; then
            if [ "${{ needs.deploy-release.result }}" = "success" ]; then
              curl -X POST -H 'Content-type: application/json' \
                --data "{\"text\":\"üöÄ Model Registry Release ${{ github.ref_name }} successfully deployed to production!\"}" \
                ${{ secrets.SLACK_WEBHOOK_URL }}
            else
              curl -X POST -H 'Content-type: application/json' \
                --data "{\"text\":\"‚ùå Model Registry Release ${{ github.ref_name }} deployment failed. Check workflow: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}\"}" \
                ${{ secrets.SLACK_WEBHOOK_URL }}
            fi
          fi 