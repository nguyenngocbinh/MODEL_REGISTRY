/*
Tên file: 04_vw_data_quality_summary.sql
Mô tả: Tạo view VW_DATA_QUALITY_SUMMARY để hiển thị tổng hợp về chất lượng dữ liệu của các bảng nguồn
Tác giả: Nguyễn Ngọc Bình
Ngày tạo: 2025-05-15
Phiên bản: 1.0
*/

USE MODEL_REGISTRY
GO

-- Kiểm tra nếu view đã tồn tại thì xóa
IF EXISTS (SELECT * FROM sys.views WHERE name = 'VW_DATA_QUALITY_SUMMARY' AND schema_id = SCHEMA_ID('dbo'))
    DROP VIEW dbo.VW_DATA_QUALITY_SUMMARY;
GO

-- Tạo view VW_DATA_QUALITY_SUMMARY
CREATE VIEW dbo.VW_DATA_QUALITY_SUMMARY AS
WITH LastRefresh AS (
    SELECT 
        srl.SOURCE_TABLE_ID,
        MAX(srl.PROCESS_DATE) AS LAST_REFRESH_DATE,
        MAX(srl.REFRESH_END_TIME) AS LAST_REFRESH_TIME
    FROM MODEL_REGISTRY.dbo.MODEL_SOURCE_REFRESH_LOG srl
    WHERE srl.REFRESH_STATUS = 'COMPLETED'
    GROUP BY srl.SOURCE_TABLE_ID
),
QualityIssues AS (
    SELECT 
        dql.SOURCE_TABLE_ID,
        COUNT(CASE WHEN dql.REMEDIATION_STATUS = 'OPEN' THEN 1 END) AS OPEN_ISSUES,
        COUNT(CASE WHEN dql.REMEDIATION_STATUS = 'IN_PROGRESS' THEN 1 END) AS IN_PROGRESS_ISSUES,
        COUNT(CASE WHEN dql.REMEDIATION_STATUS = 'RESOLVED' THEN 1 END) AS RESOLVED_ISSUES,
        COUNT(CASE WHEN dql.REMEDIATION_STATUS = 'WONTFIX' THEN 1 END) AS WONTFIX_ISSUES,
        COUNT(CASE WHEN dql.SEVERITY = 'CRITICAL' THEN 1 END) AS CRITICAL_ISSUES,
        COUNT(CASE WHEN dql.SEVERITY = 'HIGH' THEN 1 END) AS HIGH_ISSUES,
        COUNT(CASE WHEN dql.SEVERITY = 'MEDIUM' THEN 1 END) AS MEDIUM_ISSUES,
        COUNT(CASE WHEN dql.SEVERITY = 'LOW' THEN 1 END) AS LOW_ISSUES,
        SUM(dql.RECORDS_AFFECTED) AS TOTAL_RECORDS_AFFECTED,
        MAX(dql.PROCESS_DATE) AS LAST_ISSUE_DATE
    FROM MODEL_REGISTRY.dbo.MODEL_DATA_QUALITY_LOG dql
    GROUP BY dql.SOURCE_TABLE_ID
),
IssueCategorySummary AS (
    SELECT 
        dql.SOURCE_TABLE_ID,
        dql.ISSUE_CATEGORY,
        COUNT(*) AS ISSUE_COUNT,
        SUM(CASE WHEN dql.REMEDIATION_STATUS IN ('OPEN', 'IN_PROGRESS') THEN 1 ELSE 0 END) AS ACTIVE_ISSUES,
        MAX(dql.PROCESS_DATE) AS LAST_CATEGORY_ISSUE_DATE
    FROM MODEL_REGISTRY.dbo.MODEL_DATA_QUALITY_LOG dql
    WHERE dql.ISSUE_CATEGORY IS NOT NULL
    GROUP BY dql.SOURCE_TABLE_ID, dql.ISSUE_CATEGORY
),
ModelUsage AS (
    SELECT 
        tu.SOURCE_TABLE_ID,
        COUNT(DISTINCT tu.MODEL_ID) AS MODELS_COUNT,
        STRING_AGG(mr.MODEL_NAME, ', ') AS MODEL_NAMES
    FROM MODEL_REGISTRY.dbo.MODEL_TABLE_USAGE tu
    JOIN MODEL_REGISTRY.dbo.MODEL_REGISTRY mr ON tu.MODEL_ID = mr.MODEL_ID
    WHERE tu.IS_ACTIVE = 1
    GROUP BY tu.SOURCE_TABLE_ID
)
SELECT 
    st.SOURCE_TABLE_ID,
    st.SOURCE_DATABASE,
    st.SOURCE_SCHEMA,
    st.SOURCE_TABLE_NAME,
    st.TABLE_TYPE,
    st.DATA_OWNER,
    st.UPDATE_FREQUENCY,
    st.DATA_LATENCY,
    st.DATA_QUALITY_SCORE,
    ISNULL(mu.MODELS_COUNT, 0) AS MODELS_COUNT,
    mu.MODEL_NAMES,
    lr.LAST_REFRESH_DATE,
    lr.LAST_REFRESH_TIME,
    DATEDIFF(DAY, lr.LAST_REFRESH_DATE, GETDATE()) AS DAYS_SINCE_REFRESH,
    ISNULL(qi.OPEN_ISSUES, 0) AS OPEN_ISSUES,
    ISNULL(qi.IN_PROGRESS_ISSUES, 0) AS IN_PROGRESS_ISSUES,
    ISNULL(qi.RESOLVED_ISSUES, 0) AS RESOLVED_ISSUES,
    ISNULL(qi.WONTFIX_ISSUES, 0) AS WONTFIX_ISSUES,
    ISNULL(qi.CRITICAL_ISSUES, 0) AS CRITICAL_ISSUES,
    ISNULL(qi.HIGH_ISSUES, 0) AS HIGH_ISSUES,
    ISNULL(qi.MEDIUM_ISSUES, 0) AS MEDIUM_ISSUES,
    ISNULL(qi.LOW_ISSUES, 0) AS LOW_ISSUES,
    ISNULL(qi.TOTAL_RECORDS_AFFECTED, 0) AS TOTAL_RECORDS_AFFECTED,
    qi.LAST_ISSUE_DATE,
    (
        SELECT STRING_AGG(CONCAT(ics.ISSUE_CATEGORY, ' (', ics.ACTIVE_ISSUES, '/', ics.ISSUE_COUNT, ')'), '; ')
        FROM IssueCategorySummary ics
        WHERE ics.SOURCE_TABLE_ID = st.SOURCE_TABLE_ID
    ) AS ISSUE_CATEGORIES_SUMMARY,
    CASE 
        WHEN ISNULL(qi.CRITICAL_ISSUES, 0) > 0 THEN 'CRITICAL'
        WHEN ISNULL(qi.HIGH_ISSUES, 0) > 0 THEN 'HIGH'
        WHEN ISNULL(qi.MEDIUM_ISSUES, 0) > 0 THEN 'MEDIUM'
        WHEN ISNULL(qi.LOW_ISSUES, 0) > 0 THEN 'LOW'
        ELSE 'GOOD'
    END AS OVERALL_QUALITY_STATUS,
    CASE 
        WHEN st.UPDATE_FREQUENCY = 'DAILY' AND DATEDIFF(DAY, ISNULL(lr.LAST_REFRESH_DATE, '1900-01-01'), GETDATE()) > 1 THEN 'OVERDUE'
        WHEN st.UPDATE_FREQUENCY = 'WEEKLY' AND DATEDIFF(DAY, ISNULL(lr.LAST_REFRESH_DATE, '1900-01-01'), GETDATE()) > 7 THEN 'OVERDUE'
        WHEN st.UPDATE_FREQUENCY = 'MONTHLY' AND DATEDIFF(DAY, ISNULL(lr.LAST_REFRESH_DATE, '1900-01-01'), GETDATE()) > 31 THEN 'OVERDUE'
        WHEN st.UPDATE_FREQUENCY = 'QUARTERLY' AND DATEDIFF(DAY, ISNULL(lr.LAST_REFRESH_DATE, '1900-01-01'), GETDATE()) > 92 THEN 'OVERDUE'
        WHEN lr.LAST_REFRESH_DATE IS NULL THEN 'NEVER_REFRESHED'
        ELSE 'ON_SCHEDULE'
    END AS REFRESH_STATUS,
    (
        SELECT COUNT(*)
        FROM MODEL_REGISTRY.dbo.MODEL_COLUMN_DETAILS cd
        WHERE cd.SOURCE_TABLE_ID = st.SOURCE_TABLE_ID
    ) AS COLUMNS_COUNT,
    (
        SELECT COUNT(*)
        FROM MODEL_REGISTRY.dbo.MODEL_COLUMN_DETAILS cd
        WHERE cd.SOURCE_TABLE_ID = st.SOURCE_TABLE_ID
        AND cd.IS_FEATURE = 1
    ) AS FEATURE_COLUMNS_COUNT,
    st.CREATED_BY,
    st.CREATED_DATE,
    st.UPDATED_BY,
    st.UPDATED_DATE,
    st.IS_ACTIVE
FROM MODEL_REGISTRY.dbo.MODEL_SOURCE_TABLES st
LEFT JOIN LastRefresh lr ON st.SOURCE_TABLE_ID = lr.SOURCE_TABLE_ID
LEFT JOIN QualityIssues qi ON st.SOURCE_TABLE_ID = qi.SOURCE_TABLE_ID
LEFT JOIN ModelUsage mu ON st.SOURCE_TABLE_ID = mu.SOURCE_TABLE_ID;
GO

-- Thêm comment cho view
EXEC sys.sp_addextendedproperty @name = N'MS_Description', 
    @value = N'View hiển thị tổng hợp về chất lượng dữ liệu của các bảng nguồn', 
    @level0type = N'SCHEMA', @level0name = N'dbo', 
    @level1type = N'VIEW',  @level1name = N'VW_DATA_QUALITY_SUMMARY';
GO

PRINT N'View VW_DATA_QUALITY_SUMMARY đã được tạo thành công';
GO